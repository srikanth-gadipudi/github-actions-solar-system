
name: node js ci pipeline
on:
  push:
    branches: 
        - main
        - feature/*
  pull_request:
    branches:
        - main
  workflow_dispatch:
      
env:
    MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    build:
        strategy:
          matrix:
            node: [18]
            os: [ubuntu-latest]  
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js version ${{ matrix.node }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node }}
            - name: Cache node modules
              id: cache-npm
              uses: actions/cache@v3
              env:
                cache-name: cache-node-modules
              with:
                path: node_modules
                key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
            - name: npm install and build
              run: npm install
            - name: run npm test
              id: generate-test-result
              run: npm run test
            - name: archive test artifact 
              uses: actions/upload-artifact@v3
              if: always()
              with:
                path: test-results.xml
                name: test-result-artifact-${{ matrix.node }}-${{ matrix.os }}
                retention-days: 5

 
    docker:
      runs-on: ubuntu-latest
      needs: [build]
      permissions:
        contents: read
        packages: write
      concurrency: 
        group: ci-${{ github.ref}}
        cancel-in-progress: true
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: login to docker hub 
          uses: docker/login-action@v2
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ vars.DOCKERHUB_TOKEN }}
        - name: login to GHCR
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Build docker image
          uses: docker/build-push-action@v6
          with:
            push: false
            context: .
            tags: |
              ${{ vars.DOCKER_USERNAME }}/${{github.repository}}:latest
              ${{ vars.DOCKER_USERNAME }}/${{github.repository}}:${{ github.run_number }}
              ghcr.io/${{ github.repository_owner }}/${{github.repository}}:latest
              ghcr.io/${{ github.repository_owner }}/${{github.repository}}:${{ github.run_number }}
        - name: run docker image and test 
          run: |
              docker run --name=solar-system -d -p 3000:3000 \
                  -e MONGO_URI=${{ env.MONGO_URI }} \
                  -e MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
                  -e MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
                  ${{ vars.DOCKER_USERNAME }}/${{github.repository}}:latest
              export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system)
              echo $IP
              echo checking container healthcheck using wget
              wget -q -O - 127.0.0.1:3000/live
        - name: Build and push
          uses: docker/build-push-action@v6
          with:
            push: true
            context: .
            tags: |
              ${{ vars.DOCKER_USERNAME }}/${{github.repository}}:latest
              ${{ vars.DOCKER_USERNAME }}/${{github.repository}}:${{ github.run_number }}
              ghcr.io/${{ github.repository_owner }}/${{github.repository}}:latest
              ghcr.io/${{ github.repository_owner }}/${{github.repository}}:${{ github.run_number }}
        
        - name: cleanup all the docker images all
          run: docker rmi -f ${{github.repository}}:${{ github.run_number }} ${{ vars.DOCKER_USERNAME }}/${{github.repository}}:${{ github.run_number }}


    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      environment:
        name: development
      steps:
        - uses: actions/checkout@v4
        - uses: azure/setup-kubectl@v3
          with:
            version: v1.26.0
        - uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: '${{ secrets.KUBECONFIG }}'
        - run: kubectl version --short -o yaml


          

